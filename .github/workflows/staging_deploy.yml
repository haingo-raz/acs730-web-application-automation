name: "Deploy Terraform"

on:
  push:
    branches:
      - prod
    paths:
      - staging/aws_network/**
      - staging/aws_webservers/**

  pull_request:
    branches:
      - prod
    paths:
      - staging/aws_network/**
      - staging/aws_webservers/**

permissions:
  contents: read
  pull-requests: write

jobs:
  network:
    name: "Deploy Network"
    runs-on: ubuntu-latest
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Init (Network)
        run: terraform init
        working-directory: ./staging/aws_network

      - name: Terraform Validate (Network)
        run: terraform validate -no-color
        working-directory: ./staging/aws_network

      - name: Terraform Plan (Network)
        run: terraform plan -input=false -no-color -out=tf.plan
        working-directory: ./staging/aws_network

      - name: Terraform Apply (Network)
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./staging/aws_network

  webservers:
    name: "Deploy Web Servers"
    runs-on: ubuntu-latest
    needs: network
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Init (Webservers)
        run: terraform init
        working-directory: ./staging/aws_webservers

      - name: Terraform Validate (Webservers)
        run: terraform validate -no-color
        working-directory: ./staging/aws_webservers

      - name: Terraform Plan (Webservers)
        run: terraform plan -input=false -no-color -out=tf.plan
        working-directory: ./staging/aws_webservers

      - name: Terraform Apply (Webservers)
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./staging/aws_webservers
